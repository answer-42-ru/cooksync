console.log('Loading SessionIndicators...');

class SessionIndicators {
  constructor(container) {
    this.container = container;
    this.indicators = {};
    this.lastCheckTimeElement = document.getElementById('last-check-time');
  }

  render() {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ HTML, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
    const indicatorElements = this.container.querySelectorAll('.session-indicator');
    
    indicatorElements.forEach(element => {
      const endpoint = element.dataset.endpoint;
      this.indicators[endpoint] = {
        element: element,
        dot: element.querySelector('.indicator-dot'),
        label: element.querySelector('.indicator-label')
      };
    });
  }

  updateIndicator(endpointName, status, responseTime = null, errorDetails = null) {
    const indicator = this.indicators[endpointName];
    if (!indicator) {
      console.warn(`Indicator not found for endpoint: ${endpointName}`);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
    indicator.dot.classList.remove('active', 'expired', 'unavailable', 'loading');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞
    indicator.dot.classList.add(status);

    // –û–±–Ω–æ–≤–ª—è–µ–º tooltip —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    let title = `${endpointName}: ${this.getStatusText(status)}`;
    if (responseTime !== null) {
      title += ` (${responseTime}ms)`;
    }
    if (errorDetails) {
      title += `\n–û—à–∏–±–∫–∞: ${errorDetails}`;
    }
    indicator.element.title = title;
  }

  showLoading() {
    Object.keys(this.indicators).forEach(endpointName => {
      this.updateIndicator(endpointName, 'loading');
    });
    
    this.updateLastCheckTime('–ü—Ä–æ–≤–µ—Ä—è—é...');
  }

  updateLastCheckTime(timeString = null) {
    if (!this.lastCheckTimeElement) return;

    if (timeString) {
      this.lastCheckTimeElement.textContent = timeString;
      this.lastCheckTimeElement.classList.remove('outdated');
      return;
    }

    const now = new Date();
    const timeStr = now.toLocaleTimeString('ru-RU', { 
      hour12: false,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    this.lastCheckTimeElement.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${timeStr}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –≤—Ä–µ–º—è (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)
    setTimeout(() => {
      this.checkIfOutdated();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  checkIfOutdated() {
    if (!this.lastCheckTimeElement) return;
    
    const text = this.lastCheckTimeElement.textContent;
    if (text.includes('–û–±–Ω–æ–≤–ª–µ–Ω–æ:')) {
      this.lastCheckTimeElement.classList.add('outdated');
    }
  }

  getStatusText(status) {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
      case 'expired': return '–ü—Ä–æ—Ç—É—Ö–ª–∞';
      case 'unavailable': return '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      case 'loading': return '–ó–∞–≥—Ä—É–∑–∫–∞...';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  setRefreshButtonState(disabled) {
    const refreshButton = document.getElementById('refresh-sessions');
    if (refreshButton) {
      refreshButton.disabled = disabled;
      refreshButton.textContent = disabled ? '‚è≥ –û–±–Ω–æ–≤–ª—è—é...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å';
    }
  }
}