const COOKIE_NAMES = [
  "eom_profile_id",
  "eom_session_id"
];

chrome.runtime.onMessage.addListener((msg, _sender, sendResponse) => {
  if (msg.action === "checkSessionStatus" && msg.url) {
    checkEndpointStatus(msg.url).then(sendResponse);
    return true; // async
  }
  
  if (msg.action === "copyAndPaste" && msg.domain) {
    console.log("Copying cookies from:", msg.domain);

    let savedCookies = [];
    let pending = COOKIE_NAMES.length;

    COOKIE_NAMES.forEach(name => {
      // –ò—â–µ–º –∫—É–∫—É —Å–Ω–∞—á–∞–ª–∞ –ø–æ URL, –ø–æ—Ç–æ–º –ø–æ –¥–æ–º–µ–Ω—É mos.ru
      chrome.cookies.get({ url: msg.domain, name }, cookie => {
        if (cookie) {
          savedCookies.push(cookie);
          console.log(`Found ${name} on ${msg.domain}`);

          if (--pending === 0) {
            copyCookies(savedCookies, sendResponse);
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –¥–æ–º–µ–Ω–µ mos.ru
          console.log(`Cookie ${name} not found on ${msg.domain}, searching in mos.ru domain`);
          chrome.cookies.getAll({ domain: "mos.ru", name }, cookies => {
            if (cookies.length > 0) {
              savedCookies.push(cookies[0]);
              console.log(`Found ${name} in mos.ru domain`);
            } else {
              console.log(`Cookie ${name} not found anywhere`);
            }

            if (--pending === 0) {
              copyCookies(savedCookies, sendResponse);
            }
          });
        }
      });
    });

    return true; // async
  }
});

function copyCookies(savedCookies, sendResponse) {
  if (!savedCookies.length) {
    sendResponse({ message: "–ù–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫—É–∫–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è" });
    return;
  }

  console.log(`Copying ${savedCookies.length} cookies to localhost`);

  let pendingSet = savedCookies.length;
  savedCookies.forEach(cookie => {
    chrome.cookies.set({
      url: "http://localhost:3001",
      name: cookie.name,
      value: cookie.value,
      path: cookie.path || "/",
      secure: false,
      httpOnly: cookie.httpOnly || false,
      sameSite: "lax"
    }, (result) => {
      if (chrome.runtime.lastError) {
        console.error(`Error setting ${cookie.name}:`, chrome.runtime.lastError.message);
      } else if (result) {
        console.log(`‚úÖ Successfully set cookie: ${cookie.name}`);
      }

      if (--pendingSet === 0) {
        sendResponse({ message: `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${savedCookies.length} –∫—É–∫–æ–≤` });
      }
    });
  });
}

async function checkEndpointStatus(url) {
  console.log(`üîç Starting session check for: ${url}`);
  
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 5000);

  try {
    const startTime = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º Bearer —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–æ–≤
    const bearerToken = await getBearerToken(url);
    console.log(`üîë Bearer token for ${url}:`, bearerToken ? 'Found' : 'Not found');
    
    if (!bearerToken) {
      console.warn(`‚ö†Ô∏è No Bearer token found for ${url}`);
      return {
        success: false,
        status: 401,
        responseTime: Date.now() - startTime,
        url,
        error: 'No token'
      };
    }

    // –ì–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      'Accept': 'application/json, text/plain, */*',
      'Authorization': `Bearer ${bearerToken}`,
      'Cache-Control': 'no-cache'
    };

    // –î–ª—è uchebnik-test –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (url.includes('uchebnik-test.mos.ru')) {
      const additionalHeaders = await getUchebnikHeaders(url);
      Object.assign(headers, additionalHeaders);
      console.log(`üìã Additional headers for uchebnik-test:`, additionalHeaders);
    }

    console.log(`üì§ Making API request to ${url}`);

    const response = await fetch(url, {
      method: 'GET',
      credentials: 'include',
      signal: controller.signal,
      headers
    });

    clearTimeout(timeoutId);
    const responseTime = Date.now() - startTime;

    console.log(`üì• API Response from ${url}: ${response.status} ${response.statusText} (${responseTime}ms)`);

    return {
      success: response.ok,
      status: response.status,
      responseTime,
      url
    };

  } catch (error) {
    clearTimeout(timeoutId);
    
    if (error.name === 'AbortError') {
      console.log(`‚è∞ API request timeout for ${url}`);
      return {
        success: false,
        status: 408,
        responseTime: 5000,
        error: 'Timeout',
        url
      };
    }

    console.error(`üí• API request error for ${url}:`, error);
    return {
      success: false,
      status: 0,
      responseTime: 0,
      error: error.message,
      url
    };
  }
}

async function checkSessionCookies(url) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
    let domain;
    if (url.includes('school-dev.mos.ru')) {
      domain = 'school-dev.mos.ru';
    } else if (url.includes('school-test.mos.ru')) {
      domain = 'school-test.mos.ru';
    } else if (url.includes('uchebnik-dev.mos.ru')) {
      domain = 'uchebnik-dev.mos.ru';
    } else if (url.includes('uchebnik-test.mos.ru')) {
      domain = 'uchebnik-test.mos.ru';
    }

    console.log(`üîç Checking cookies for domain: ${domain}`);

    let requiredCookies = [];
    let info = [];

    if (domain.includes('school-')) {
      // –î–ª—è school –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º aupd_token
      requiredCookies = ['aupd_token'];
    } else if (domain.includes('uchebnik-')) {
      // –î–ª—è uchebnik –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º eom_session_id –∏ eom_profile_id
      requiredCookies = ['eom_session_id', 'eom_profile_id'];
    }

    let validCookies = 0;
    
    for (const cookieName of requiredCookies) {
      // –ò—â–µ–º –∫—É–∫—É –Ω–∞ —Ç–æ—á–Ω–æ–º –¥–æ–º–µ–Ω–µ
      let cookies = await chrome.cookies.getAll({ 
        domain: domain,
        name: cookieName 
      });

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –¥–æ–º–µ–Ω–µ
      if (cookies.length === 0) {
        cookies = await chrome.cookies.getAll({ 
          domain: '.mos.ru',
          name: cookieName 
        });
      }
      
      if (cookies.length > 0 && cookies[0].value) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤
        if (cookieName.includes('token') || cookieName.includes('session')) {
          const isExpired = isJWTExpired(cookies[0].value);
          if (isExpired) {
            info.push(`${cookieName}: expired`);
            console.log(`‚è∞ ${cookieName} is expired for ${domain}`);
          } else {
            validCookies++;
            info.push(`${cookieName}: valid`);
            console.log(`‚úÖ ${cookieName} is valid for ${domain}`);
          }
        } else {
          validCookies++;
          info.push(`${cookieName}: present`);
          console.log(`‚úÖ ${cookieName} found for ${domain}`);
        }
      } else {
        info.push(`${cookieName}: missing`);
        console.log(`‚ùå ${cookieName} not found for ${domain}`);
      }
    }

    const hasValidSession = validCookies === requiredCookies.length;
    console.log(`üéØ Session check result for ${domain}: ${hasValidSession ? 'VALID' : 'INVALID'} (${validCookies}/${requiredCookies.length})`);

    return {
      hasValidSession,
      info: info.join(', ')
    };

  } catch (error) {
    console.error('üí• Error checking cookies:', error);
    return {
      hasValidSession: false,
      info: `Error: ${error.message}`
    };
  }
}

async function getBearerToken(url) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
    let domain;
    if (url.includes('school-dev.mos.ru')) {
      domain = 'school-dev.mos.ru';
    } else if (url.includes('school-test.mos.ru')) {
      domain = 'school-test.mos.ru';
    } else if (url.includes('uchebnik-dev.mos.ru')) {
      domain = 'uchebnik-dev.mos.ru';
    } else if (url.includes('uchebnik-test.mos.ru')) {
      domain = 'uchebnik-test.mos.ru';
    }

    console.log(`üîç Looking for aupd_token cookie on domain: ${domain}`);

    // –ò—â–µ–º aupd_token –∫—É–∫—É - —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
    let cookies = await chrome.cookies.getAll({ 
      domain: domain,
      name: 'aupd_token' 
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –¥–æ–º–µ–Ω–µ .mos.ru
    if (cookies.length === 0) {
      console.log(`üîç Token not found on ${domain}, trying .mos.ru`);
      cookies = await chrome.cookies.getAll({ 
        domain: '.mos.ru',
        name: 'aupd_token' 
      });
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
    if (cookies.length === 0) {
      console.log(`üîç Token not found on .mos.ru, searching all domains`);
      cookies = await chrome.cookies.getAll({ 
        name: 'aupd_token' 
      });
      console.log(`üîç Found ${cookies.length} aupd_token cookies across all domains`);
    }

    if (cookies.length > 0 && cookies[0].value) {
      console.log(`‚úÖ Found Bearer token for ${domain} on domain: ${cookies[0].domain}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ JWT —Ç–æ–∫–µ–Ω
      if (isJWTExpired(cookies[0].value)) {
        console.warn(`‚ö†Ô∏è Bearer token for ${domain} is expired`);
        return null;
      }
      
      return cookies[0].value;
    }

    console.warn(`‚ùå No Bearer token found for ${domain}`);
    return null;

  } catch (error) {
    console.error('üí• Error getting Bearer token:', error);
    return null;
  }
}

function isJWTExpired(token) {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const now = Math.floor(Date.now() / 1000);
    const isExpired = payload.exp && payload.exp < now;
    
    if (isExpired) {
      console.log(`‚è∞ JWT token expired. Exp: ${payload.exp}, Now: ${now}`);
    }
    
    return isExpired;
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not parse JWT token:', error.message);
    return true;
  }
}

async function getUchebnikHeaders(url) {
  try {
    const headers = {};
    
    // –ü–æ–ª—É—á–∞–µ–º profile-id –∏–∑ –∫—É–∫–æ–≤
    const profileCookies = await chrome.cookies.getAll({ 
      domain: 'uchebnik-test.mos.ru',
      name: 'eom_profile_id' 
    });
    
    if (profileCookies.length > 0 && profileCookies[0].value) {
      headers['profile-id'] = profileCookies[0].value;
    }

    // –î–ª—è user-id –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    // –ò–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –≤–∏–¥–Ω–æ user-id: 1000200000
    headers['user-id'] = '1000200000';

    console.log(`Uchebnik headers:`, headers);
    return headers;

  } catch (error) {
    console.error('Error getting Uchebnik headers:', error);
    return {};
  }
}